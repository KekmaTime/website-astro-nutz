<div class="fixed top-20 left-4 z-40">
    <button
      id="audio-toggle"
      class="group flex items-center justify-center size-10 rounded-full bg-black/10 dark:bg-white/10 hover:bg-black/20 dark:hover:bg-white/20 transition-colors duration-300 ease-in-out"
      aria-label="Toggle music"
    >
      <svg 
        id="audio-play"
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 24 24"
        class="size-5 stroke-2 fill-none stroke-current"
      >
        <polygon points="5 3 19 12 5 21 5 3"></polygon>
      </svg>
      <svg 
        id="audio-pause"
        xmlns="http://www.w3.org/2000/svg" 
        viewBox="0 0 24 24"
        class="hidden size-5 stroke-2 fill-none stroke-current"
      >
        <rect x="6" y="4" width="4" height="16"></rect>
        <rect x="14" y="4" width="4" height="16"></rect>
      </svg>
    </button>
</div>

<script>
  let isPlaying = false;
  let audioElement: HTMLAudioElement | null = null;

  function createAudio() {
    if (!audioElement) {
      audioElement = new Audio("/music.mp3");
      audioElement.loop = true;
    }
    return audioElement;
  }

  function updatePlayerState(playing: boolean) {
    const playIcon = document.getElementById("audio-play");
    const pauseIcon = document.getElementById("audio-pause");
    
    if (playing) {
      playIcon?.classList.add("hidden");
      pauseIcon?.classList.remove("hidden");
    } else {
      playIcon?.classList.remove("hidden");
      pauseIcon?.classList.add("hidden");
    }
  }

  function initAudio() {
    const audio = createAudio();
    const toggleButton = document.getElementById("audio-toggle");

    // Restore previous state
    updatePlayerState(isPlaying);
    if (isPlaying) {
      const playPromise = audio.play();
      if (playPromise !== undefined) {
        playPromise.catch(() => {});
      }
    }

    toggleButton?.addEventListener("click", () => {
      if (isPlaying) {
        audio.pause();
      } else {
        const playPromise = audio.play();
        if (playPromise !== undefined) {
          playPromise.then(() => {
            updatePlayerState(true);
          }).catch(() => {});
        }
      }
      isPlaying = !isPlaying;
      updatePlayerState(isPlaying);
    });
  }

  // Initialize on first load
  document.addEventListener("DOMContentLoaded", initAudio);
  
  // Handle view transitions
  document.addEventListener("astro:after-swap", () => {
    updatePlayerState(isPlaying);
    initAudio();
  });
</script>